// Annoyingly we have to redefine these here
#define FAASM_SGX 1
#define FAASM_SGX_WAMR_WASI_LIBC 1

enclave{
    include "/usr/local/code/faasm/include/enclave/error.h"
    include "/build/faasm/_deps/wamr_ext-src/core/iwasm/include/wasm_export.h"
    include "/build/faasm/_deps/wamr_ext-src/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives/include/wasmtime_ssp.h"
    include "sgx_report.h"

    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;
#if(FAASM_SGX_WAMR_WASI_LIBC)
// I think we can remove this
    from "sgx_wamr.edl" import *;
#endif

    // We need to copy this from include/wamr/types.h as the Eder8r can not
    // work out the transitive includes there
    union iovec_app_t
    {
        uint32_t buffOffset;
        uint32_t buffLen;
    };

    trusted{
        public faasm_sgx_status_t ecallCreateReport(
            [in]    const sgx_target_info_t* qeTarget,
            [in]    const sgx_report_data_t* heldData,
            [out]   sgx_report_t* report);

        public faasm_sgx_status_t ecallInitWamr(void);

        public faasm_sgx_status_t ecallLoadModule(
            [in, size=wasmOpCodeSize]   void *wasmOpCodePtr,
                                        uint32_t wasmOpCodeSize,
                                        uint32_t faasletId
        );

        public faasm_sgx_status_t ecallUnloadModule(
            uint32_t faasletId
        );

        public faasm_sgx_status_t ecallCallFunction(
                                uint32_t faasletId,
                                uint32_t argc,
            [in, count=argc]    char** argv
        );

        public faasm_sgx_status_t ecallRunInternalTest(
                            uint32_t faasletId,
            [in, string]    const char* testCase
        );

        public faasm_sgx_status_t ecallCryptoChecks(void);
    };

    untrusted{
        void ocallLogError([in, string] const char* msg);

        void ocallLogDebug([in, string] const char* msg);

        // We need separate OCalls because WAMR's native logging adds
        // newlines, which makes the output through the spdlog-based OCalls
        // unreadable
        void ocallLogWamr([in, string] const char* msg);

        int ocallFaasmReadInput(
            [in, out, size=bufferSize]  uint8_t* buffer,
                                        unsigned int bufferSize
        );

        void ocallFaasmWriteOutput(
            [in, size=outputSize]   uint8_t* output,
                                    unsigned int outputSize
        );

        unsigned int ocallFaasmChainName(
            [in, string]            const char* name,
            [in, size=inputSize]    uint8_t* input,
                                    long inputSize
        ) allow(ecallLoadModule);

        unsigned int ocallFaasmChainPtr(
                                    int wasmFuncPtr,
            [in, size=inputSize]    uint8_t* input,
                                    long inputSize
        );

        unsigned int ocallFaasmAwaitCall(unsigned int callId);

        unsigned int ocallFaasmAwaitCallOutput(
                                    unsigned int callId,
            [out, size=bufferSize]  uint8_t* buffer,
                                    unsigned int bufferSize
        );

        // ----- Env Filesystem Calls -----

        uint32_t ocallDup(uint32_t fd);

        // ----- WASI Filesystem Calls -----

        int32_t ocallWasiFdFdstatGet(
                    int32_t fd,
            [out]   uint8_t* wasiFileType,
            [out]   uint64_t* rightsBase,
            [out]   uint64_t* rightsInheriting
        );

        int32_t ocallWasiFdFilestatGet(
                    int32_t fd,
            [out]   uint8_t* wasiFiletype,
            [out]   uint64_t* st_dev,
            [out]   uint64_t* st_ino,
            [out]   uint64_t* st_nlink,
            [out]   uint64_t* st_size,
            [out]   uint64_t* st_atim,
            [out]   uint64_t* st_mtim,
            [out]   uint64_t* st_ctim
        );

        int32_t ocallWasiFdPrestatDirName(
                                    int32_t fd,
            [out, size=pathLen]     char* path,
                                    int32_t pathLen
        );

        int32_t ocallWasiFdPrestatGet(
                    int32_t fd,
            [out]   uint8_t* prType,
            [out]   uint32_t* nameLen
        );

        int32_t ocallWasiFdRead(
                                            int32_t fd,
            [in, out, size=ioVecBasesSize]  uint8_t** ioVecBases,
                                            int32_t ioVecBasesSize,
            [in, out, size=ioVecLensSize]   uint8_t** ioVecLens,
                                            int32_t ioVecLensSize,
                                            int32_t ioVecCountWasm,
            [out]                           int32_t* bytesRead
        );

        int32_t ocallWasiFdSeek(
                    int32_t fd,
                    int64_t offset,
                    int32_t whence,
            [out]   uint64_t* newOffset
        );

        int32_t ocallWasiFdWrite(
                                        int32_t fd,
            [in, size=ioVecBasesSize]   uint8_t** ioVecBases,
                                        int32_t ioVecBasesSize,
            [in, size=ioVecLensSize]    uint8_t** ioVecLens,
                                        int32_t ioVecLensSize,
                                        int32_t ioVecCountWasm,
            [out]                       int32_t* bytesWritten
        );

        int32_t ocallWasiPathFilestatGet(
                                int32_t fd,
            [in, size=pathLen]  char* path,
                                int32_t pathLen,
            [out]               uint8_t* wasiFiletype,
            [out]               uint64_t* st_dev,
            [out]               uint64_t* st_ino,
            [out]               uint64_t* st_nlink,
            [out]               uint64_t* st_size,
            [out]               uint64_t* st_atim,
            [out]               uint64_t* st_mtim,
            [out]               uint64_t* st_ctim
        );

        int32_t ocallWasiPathOpen(
                                int32_t fdNative,
                                int32_t lookupFlags,
            [in, size=pathLen]  char* path,
                                int32_t pathLen,
                                int32_t openFlags,
                                int64_t rightsBase,
                                int64_t rightsInheriting,
                                int32_t fdFlags,
            [out]               int32_t* fdWasm
        );

        int32_t ocallWasiPathRename(
                                    int32_t oldFd,
            [in, size=oldPathLen]   char* oldPath,
                                    int32_t oldPathLen,
                                    int32_t newFd,
            [in, size=newPathLen]   char* newPath,
                                    int32_t newPathLen
        );

        int32_t ocallWasiPathUnlinkFile(
                                int32_t fd,
            [in, size=pathLen]  char* path,
                                int32_t pathLen
        );
    };
};
